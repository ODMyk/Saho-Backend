// <auto-generated />
using Infrastructure.SQL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.SQL.Migrations
{
    [DbContext(typeof(PostgreDbContext))]
    [Migration("20240227144419_Migration1")]
    partial class Migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlbumSong", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("integer")
                        .HasColumnName("AlbumId");

                    b.Property<int>("SongId")
                        .HasColumnType("integer")
                        .HasColumnName("SongId");

                    b.HasKey("AlbumId", "SongId")
                        .HasName("AlbumSongs_PK");

                    b.HasIndex("SongId");

                    b.ToTable("Album songs", "public");
                });

            modelBuilder.Entity("Entities.AlbumEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("ArtistId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("Albums_PK");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums", "public");
                });

            modelBuilder.Entity("Entities.PlaylistEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("OwnerId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("Playlists_PK");

                    b.HasIndex("OwnerId");

                    b.ToTable("Playlists", "public");
                });

            modelBuilder.Entity("Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("Roles_PK");

                    b.ToTable("Roles", "public");
                });

            modelBuilder.Entity("Entities.SongEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("ArtistId");

                    b.Property<int>("TimesPlayed")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("Songs_PK");

                    b.HasIndex("ArtistId");

                    b.ToTable("Songs", "public");
                });

            modelBuilder.Entity("Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Users_PK");

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("FavoriteAlbum", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("integer")
                        .HasColumnName("AlbumId");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("AlbumId", "UserId")
                        .HasName("FavoriteAlbums_PK");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite albums", "public");
                });

            modelBuilder.Entity("FavoriteArtist", b =>
                {
                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("ArtistId");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("ArtistId", "UserId")
                        .HasName("FavoriteArtists_PK");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite artists", "public");
                });

            modelBuilder.Entity("FavoritePlaylist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer")
                        .HasColumnName("PlaylistId");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("PlaylistId", "UserId")
                        .HasName("FavoritePlaylists_PK");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite playlists", "public");
                });

            modelBuilder.Entity("FavoriteSong", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("integer")
                        .HasColumnName("SongId");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("SongId", "UserId")
                        .HasName("FavoriteSongs_PK");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite songs", "public");
                });

            modelBuilder.Entity("PlaylistSong", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer")
                        .HasColumnName("PlaylistId");

                    b.Property<int>("SongId")
                        .HasColumnType("integer")
                        .HasColumnName("SongId");

                    b.HasKey("PlaylistId", "SongId")
                        .HasName("PlaylistSongs_PK");

                    b.HasIndex("SongId");

                    b.ToTable("Playlist songs", "public");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("RoleId");

                    b.HasKey("UserId", "RoleId")
                        .HasName("UserRoles_PK");

                    b.HasIndex("RoleId");

                    b.ToTable("User roles", "public");
                });

            modelBuilder.Entity("AlbumSong", b =>
                {
                    b.HasOne("Entities.AlbumEntity", null)
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("AlbumSong_AlbumId_FK");

                    b.HasOne("Entities.SongEntity", null)
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("AlbumSong_SongId_FK");
                });

            modelBuilder.Entity("Entities.AlbumEntity", b =>
                {
                    b.HasOne("Entities.UserEntity", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Album_ArtistId_FK");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Entities.PlaylistEntity", b =>
                {
                    b.HasOne("Entities.UserEntity", "Owner")
                        .WithMany("Playlists")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Playlist_OwnerId_FK");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Entities.SongEntity", b =>
                {
                    b.HasOne("Entities.UserEntity", "Artist")
                        .WithMany("Songs")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Song_ArtistId_FK");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("FavoriteAlbum", b =>
                {
                    b.HasOne("Entities.AlbumEntity", null)
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("LikedAlbums_AlbumId_FK");

                    b.HasOne("Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("LikedAlbums_UserId_FK");
                });

            modelBuilder.Entity("FavoriteArtist", b =>
                {
                    b.HasOne("Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("LikedArtists_ArtistId_FK");

                    b.HasOne("Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("LikedArtists_UserId_FK");
                });

            modelBuilder.Entity("FavoritePlaylist", b =>
                {
                    b.HasOne("Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("LikedAlbums_PlaylistId_FK");

                    b.HasOne("Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("LikedAlbums_UserId_FK");
                });

            modelBuilder.Entity("FavoriteSong", b =>
                {
                    b.HasOne("Entities.SongEntity", null)
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("LikedSongs_SongId_FK");

                    b.HasOne("Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("LikedSongs_UserId_FK");
                });

            modelBuilder.Entity("PlaylistSong", b =>
                {
                    b.HasOne("Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PlaylistSong_PlaylistId_FK");

                    b.HasOne("Entities.SongEntity", null)
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PlaylistSong_SongId_FK");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserRoles_RoleId_FK");

                    b.HasOne("Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserRoles_UserId_FK");
                });

            modelBuilder.Entity("Entities.UserEntity", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Playlists");

                    b.Navigation("Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
